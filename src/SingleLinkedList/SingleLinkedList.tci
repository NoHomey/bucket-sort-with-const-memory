#pragma once

#include "SingleLinkedList.thd"
#include <utility>

template<typename T>
inline SingleLinkedList<T>::SingleLinkedList() noexcept
: head{nullptr}, tail{nullptr}, size{0} { }

template<typename T>
inline SingleLinkedList<T>::~SingleLinkedList() noexcept {
    destroy();
    null();
}

template<typename T>
inline SingleLinkedList<T>::SingleLinkedList(const SingleLinkedList& other)
: SingleLinkedList{} {
    for(Node* iter = other.head; iter; iter = iter->next) {
        appendNode(new Node{iter->value});
    }
    size = other.size;
}

template<typename T>
inline SingleLinkedList<T>::SingleLinkedList(SingleLinkedList&& other) noexcept
: head{other.head}, tail{other.tail}, size{other.size} {
    other.null();
}

template<typename T>
SingleLinkedList<T>& SingleLinkedList<T>::operator=(const SingleLinkedList& other) {
    if(this != &other) {
        operator=({other});
    }
    return *this;
}

template<typename T>
SingleLinkedList<T>& SingleLinkedList<T>::operator=(SingleLinkedList&& other) noexcept {
    if(this != &other) {
        destroy();
        head = other.head;
        tail = other.tail;
        size = other.size;
        other.null();
    }
    return *this;
}

template<typename T>
inline std::size_t SingleLinkedList<T>::length() const noexcept {
    return size;
}

template<typename T>
inline bool SingleLinkedList<T>::isEmpty() const noexcept {
    return !head;
}

template<typename T>
inline typename SingleLinkedList<T>::ConstIterator SingleLinkedList<T>::first() const noexcept {
    return {head, this};
}

template<typename T>
inline void SingleLinkedList<T>::append(const T& value) {
    append(new Node{value});
}

template<typename T>
inline void SingleLinkedList<T>::append(T&& value) {
    append(new Node{std::move(value)});
}

template<typename T>
inline void SingleLinkedList<T>::append(SingleLinkedList&& other) noexcept {
    assert(this != &other);
    appendNode(other.head);
    tail = other.tail;
    size += other.size;
    other.null();
}

template<typename T>
inline void SingleLinkedList<T>::destroy() noexcept {
    Node* temp;
    while(head) {
        temp = head;
        head = head->next;
        delete temp;
    }
}

template<typename T>
inline void SingleLinkedList<T>::null() noexcept {
    head = tail = nullptr;
    size = 0;
}

template<typename T>
inline void SingleLinkedList<T>::appendNode(Node* node) noexcept {
    assert(node);
    tail = !isEmpty() ? (tail->next = node) : (head = node);
}

template<typename T>
inline void SingleLinkedList<T>::append(Node* node) noexcept {
    appendNode(node);
    ++size;
}

template<typename T>
template<const std::size_t bucketsCount>
inline void SingleLinkedList<T>::bucketSort(std::size_t (*bucketSelector)(const T&)) noexcept {
    assert(bucketsCount);
    if(size > 1) {
        const size_t savedSize = size;
        SingleLinkedList buckets[bucketsCount];
        Node* iter = head;
        null();
        for(; iter; iter = iter->next) {
            buckets[bucketSelector(iter->value)].appendNode(iter);
        }
        for(std::size_t bucketIndex = 0; bucketIndex < bucketsCount; ++bucketIndex) {
            if(!buckets[bucketIndex].isEmpty()) {
                append(std::move(buckets[bucketIndex]));
            }
        }
        tail->next = nullptr;
        size = savedSize;
    }
}