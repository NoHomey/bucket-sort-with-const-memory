#pragma once

#include "SingleLinkedList.thd"
#include <utility>

template<typename T>
inline SingleLinkedList<T>::SingleLinkedList() noexcept
: list{} { }

template<typename T>
inline SingleLinkedList<T>::~SingleLinkedList() noexcept {
    destroy();
    null();
}

template<typename T>
inline SingleLinkedList<T>::SingleLinkedList(const SingleLinkedList& other)
: SingleLinkedList{} {
    for(Node* iter = other.list.head; iter; iter = iter->next) {
        append(new Node{iter->value});
    }
}

template<typename T>
inline SingleLinkedList<T>::SingleLinkedList(SingleLinkedList&& other) noexcept
: list{} {
    move(std::move(other));
}

template<typename T>
SingleLinkedList<T>& SingleLinkedList<T>::operator=(const SingleLinkedList& other) {
    if(this != &other) {
        move({other});
    }
    return *this;
}

template<typename T>
SingleLinkedList<T>& SingleLinkedList<T>::operator=(SingleLinkedList&& other) noexcept {
    if(this != &other) {
        move(std::move(other));
    }
    return *this;
}

template<typename T>
inline std::size_t SingleLinkedList<T>::length() const noexcept {
    std::size_t size = 0;
    for(Node* iter = list.head; iter; iter = iter->next) {
        ++size;
    }
    return size;
}

template<typename T>
inline bool SingleLinkedList<T>::isEmpty() const noexcept {
    return list.isEmpty();
}

template<typename T>
inline typename SingleLinkedList<T>::ConstIterator SingleLinkedList<T>::first() const noexcept {
    return {list.head, this};
}

template<typename T>
inline void SingleLinkedList<T>::append(const T& value) {
    list.append(new Node{value});
}

template<typename T>
inline void SingleLinkedList<T>::append(T&& value) {
    list.append(new Node{std::move(value)});
}

template<typename T>
inline void SingleLinkedList<T>::append(SingleLinkedList&& other) noexcept {
    list.append(other.list);
    other.null();
}

template<typename T>
inline void SingleLinkedList<T>::destroy() noexcept {
    Node* temp;
    while(list.head) {
        temp = list.head;
        list.head = list.head->next;
        delete temp;
    }
}

template<typename T>
inline void SingleLinkedList<T>::null() noexcept {
    list.head = list.tail = nullptr;
}

template<typename T>
inline void SingleLinkedList<T>::move(SingleLinkedList&& other) noexcept {
    destroy();
    list.head = list.other.head;
    list.tail = list.other.tail;
    other.null();
}

template<typename T>
template<const std::size_t bucketsCount>
inline void SingleLinkedList<T>::bucketSort(std::size_t (*bucketSelector)(const T&)) noexcept {
    assert(bucketsCount);
    if(!isEmpty() && list.head->next) {
        List buckets[bucketsCount];
        Node* iter = list.head;
        null();
        for(; iter; iter = iter->next) {
            buckets[bucketSelector(iter->value)].append(iter);
        }
        for(std::size_t bucketIndex = 0; bucketIndex < bucketsCount; ++bucketIndex) {
            if(!buckets[bucketIndex].isEmpty()) {
                list.append(buckets[bucketIndex]);
            }
        }
        list.tail->next = nullptr;
    }
}