#pragma once

#include "List.thd"
#include <cassert>

template<typename T>
SingleLinkedList<T>::List::List() noexcept
: head{nullptr}, tail{nullptr} { }

template<typename T>
bool SingleLinkedList<T>::List::isEmpty() const noexcept {
    return !head;
}

template<typename T>
void SingleLinkedList<T>::List::append(Node* node) noexcept {
    assert(node);
    tail = !isEmpty() ? (tail->next = node) : (head = node);
}

template<typename T>
void SingleLinkedList<T>::List::append(const List& other) noexcept {
    assert(this != &other);
    append(other.head);
    tail = other.tail;
}